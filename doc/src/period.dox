/**
@class asap::period
@brief The asap::period class is a bound period, with starting and ending dates. Its purpose is to provide datetime iteration.

```
for (auto d: asap::period(asap::now(), asap::tomorow()).every(1_hour)) {
  std::cout << d << std::endl;
}
```

You can also use the `asap::datetime::until` method to ease construction of `asap::period`:

```
for (auto d: asap::now().until(asap::tomorrow()).every(1_hour)) {
  std::cout << d << std::endl;
}
```

You can specify a period and re-use it as many times as you want:

```
auto period = asap::now().until(asap::tomorrow());
for (auto d: period.every(1_hour)) std::cout << d << std::endl;
for (auto d: period.every(1_minute)) std::cout << d << std::endl;
```

`period::difference()` returns the difference between the end `asap::datetime` minus the beginning. You can specify
the return type as a template parameter (or you can just crate an `asap::duration` from it):

```
auto period = asap::now().until(asap::tomorrow());
auto diff1 = period.difference(); // as seconds;
auto diff2 = period.difference<asap::days>(); // as days;
asap::years diff3 = period.difference(); // as years;
```

You can also obtain the beginning and the end `asap::datetime` from a period using `from()` and `to()`. You can also use
`from(datetime)` and `to(datetime)` to set the beginning and the end of a period. Existing iterations won't be affected.

@fn asap::period::period(const asap::datetime &a=asap::datetime(), const asap::datetime &b=asap::datetime())
@brief Creates a new peeriod starting at @p a and ending at @p b
@param a An asap::datetime instance that will be the start of the period
@param b An asap::datetime instance that will mark the end

@fn asap::period::from() const
@brief Returns an asap::datetime instance marking the beginning of the period
@return the beginning of the period

@fn asap::period::from(const asap::datetime &begin)
@brief Sets the beginning of the period
@param begin An asap::datetime instance to serve as the beginning
@return `*this`

@fn asap::period::to() const
@brief Returns an asap::datetime instance marking the end of the period
@return the end of the period

@fn asap::period::to(const asap::datetime &end)
@brief Sets the end of the period
@param end An asap::datetime instance to serve as the end
@return `*this`

@fn template<T> asap::period::difference() const

@fn asap::period::difference() const

@fn asap::period::every(const asap::duration< stepconv > &d) const
@brief Returns an accessor that can be used to iterate between the beginning and the end dates
@param d The stepping duration (e.g, 1_day)
@return an period accessor to be used when iterating the period range
@details This method is useful when iterating between instances of asap::datetime, it returns an accessor that has a `begin()` and `end()` method, thus allowing you to use range-based for loops or even use iterators.
*/
