/**
@class asap::datetime
@brief The asap::datetime class exposes methods to create, manipulate and print dates

It can be constructed from:

- another `asap::datetime`
- a string in a known format
- a string with a specified format
- seconds from unix epoch
- broken-down time (ie., `asap::datetime(2007, 6, 1, 0, 0, 0))` for July 1 2007

`asap::datetime` has overloads for printing to an `std::iostream` so you can directly print to `std::cout`:

```cpp
std::cout << asap::now() << std::endl;
```

You can also format it via the `asap::datetime::str` method

```cpp
std::cout << asap::now().str("%c") << std::endl;
```

@fn asap::datetime::datetime(time_t time=std::time(nullptr)) noexcept
@brief Constructs a asap::datetime from a `time_t`, defaulting to the current time.
@param time The time specified as seconds since epoch (`time_t`)

This is also the default asap::datetime constructor

@fn asap::datetime::datetime(const std::string &datetime, const std::string &format="%x %X", const std::string &locale="")
@brief Constructs a asap::datetime from a string, optionally with a format and a locale
@param datetime The datetime specified in a string
@param format The datetime format, defaults to "%x %X" which is equivalent to "%d/%m/%Y %H:%M:%S" on some locales and "%m/%d/%Y %H:%M:%S in en_US locale)
@param locale The locale to specify when reading the string

This constructor tries its best to read the date and time specified in the string. This is what it tries:

- Read the string in the specified format and locale
- Convert the datetime back to a string using the same format and locale
- If the strings are equal, it stops
- If not it tries the next known format
- If nothing works, defaults to 0 seconds since epoch.

One can argue this is the slowest method in the library.

@fn asap::datetime::datetime(uint32_t year, uint32_t month, uint32_t day, uint32_t hours=0, uint32_t minutes=0, uint32_t seconds=0)
@brief Constructs a asap::datetime from a broken down time
@param year The year
@param month The 0-based month (e.g, 0 for January)
@param day The day of the month (**not the day of the year!**)
@param hours Hour of the day
@param minutes Minutes of the day
@param seconds Seconds of the day

@fn asap::datetime::operator+=(const seconds & d)
@brief Adds a duration specified in seconds to a datetime
@param d The duration specified in seconds
@return `*this`

@fn asap::datetime::operator+=(const minutes & d)
@brief Adds a duration specified in minutes to a datetime
@param d The duration specified in minutes
@return `*this`

@fn asap::datetime::operator+=(const hours & d)
@brief Adds a duration specified in hours to a datetime
@param d The duration specified in hours
@return `*this`

@fn asap::datetime::operator+=(const days & d)
@brief Adds a duration specified in days to a datetime
@param d The duration specified in days
@return `*this`

@fn asap::datetime::operator+=(const weeks & d)
@brief Adds a duration specified in weeks to a datetime
@param d The duration specified in weeks
@return `*this`

@fn asap::datetime::operator+=(const months & d)
@brief Adds a duration specified in months to a datetime
@param d The duration specified in months
@return `*this`

@fn asap::datetime::operator+=(const years & d)
@brief Adds a duration specified in years to a datetime
@param d The duration specified in years
@return `*this`

@fn asap::datetime::operator+=(time_t stamp)
@brief Adds a duration specified in seconds since epoch to a datetime
@param stamp The duration specified in seconds since epoch
@return `*this`

@fn asap::datetime::operator-=(time_t stamp)
@brief Subtracts a duration specified in seconds since epoch from a datetime
@param stamp The duration specified in seconds since epoch
@return `*this`

@fn asap::datetime::operator-=(const asap::duration<convert> &c)
@tparam convert The converting factor for the duration (automatically deduced)
@brief Subtracts a duration from this datetime
@param c The duration
@return `*this`

@fn asap::datetime::operator-(const datetime & other) const
@brief Returns a duration in seconds specifying the difference to another datetime
@param other The datetime to calculate the difference
@return an instance of asap::seconds representing the difference to `other`

@fn asap::datetime::morning() const
@brief Creates a new asap::datetime representing the morning of the same day
@return a new asap::datetime at 6 am in the same day (which usually is considered morning around the world)

@fn asap::datetime::afternoon() const
@brief Creates a new asap::datetime representing the afternoon of the same day
@return a new asap::datetime at 12 pm in the same day (which usually is considered afternoon around the world)

@fn asap::datetime::midnight() const
@brief Creates a new asap::datetime representing the midnight of the same day
@return a new asap::datetime at 0 am in the same day

@fn asap::datetime::timestamp() const
@brief Converts an asap::datetime to a `time_t`
@return the timestamp of this asap::datetime in `time_t`

@fn asap::datetime::str(const std::string &fmt="%x %X") const
@param fmt The format to use when converting
@brief Converts to an string using the format specified
@return A std::string with the resulting conversion

@fn asap::datetime::until(const asap::datetime & dt) const
@brief Creates an instance of asap::period starting at this datetime and ending at dt
@param dt Ending datetime
@return An instance of asap::period

@fn asap::datetime::second() const
@brief Returns the seconds of a minute specified in this asap::datetime
@returns seconds of a minute

@fn asap::datetime::second(int value)
@brief Sets the seconds in a minute specified in this asap::datetime
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::minute() const
@brief Returns the minutes of an hour specified in this asap::datetime
@returns minutes of an hour

@fn asap::datetime::minute(int value)
@brief Sets the minutes in an hour specified in this asap::datetime
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::hour() const
@brief Returns the hours of a day specified in this asap::datetime
@returns hours of a day of this asap::datetime


@fn asap::datetime::hour(int value)
@brief Sets the hour of a day specified in this asap::datetime
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::wday() const
@brief Returns the day of a week specified in this asap::datetime
@returns day of a week of this asap::datetime

@fn asap::datetime::wday(int value)
@brief Sets the day of a week specified in this asap::datetime (0-6)
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::mday() const
@brief Returns the day of a month specified in this asap::datetime
@returns day of a month of this asap::datetime

@fn asap::datetime::mday(int value)
@brief Sets the day of a month specified in this asap::datetime (1-31)
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::yday() const
@brief Returns the day in a year specified in this asap::datetime
@returns day in a year

@fn asap::datetime::yday(int value)
@brief Sets the day in a year specified in this asap::datetime (1-365)
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::month() const
@brief Returns the month in a year specified in this asap::datetime
@returns month in a year

@fn asap::datetime::month(int value)
@brief Sets the month in a year specified in this asap::datetime (0-11)
@param value The value to set
@returns `*this`
@details You can overflow this value and it will be converted correctly

@fn asap::datetime::year() const
@brief Returns the year specified in this asap::datetime
@returns year of this asap::datetime

@fn asap::datetime::year(int value)
@param value The value to set
@brief Sets the year specified in this asap::duration
@returns `*this`
*/
