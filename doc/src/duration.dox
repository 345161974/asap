/**
@class asap::duration
@brief The asap::duration class exposes methods to create, manipulate and print durations
@tparam convert The multiplier in seconds for this duration

A duration is an unbounded period of time. It does not have a start datetime nor an end.
They can be obtained via the following helper classes:

- `asap::seconds` for specifying a duration in *seconds*
- `asap::minutes` for specifying a duration in *minutes*
- `asap::hours` for specifying a duration in *hours*
- `asap::days` for specifying a duration in *days*
- `asap::weeks` for specifying a duration in *weeks*
- `asap::months` for specifying a duration in *months*
- `asap::years` for specifying a duration in *years*

All of them have singular equivalents (e.g, `asap::minute`) for convenience. They can also be constructed from
literals available in the `asap::literals` namespace. Consult the @c asap::literals documentation for more about
 ASAP literals.

Note that they all work with floating point values, so you can specify fractions of a duration:

```
// specify half a day (which is equivalent to 12 hours):
auto halfday = asap::days(0.5f);

// note that half an year is not equivalent to 6 months, mainly because
// for duration, a month has 30 days.
bool equiv = asap::years(0.5f) == asap::months(6); //false
```

You can add and subtract durations from each other. The right-hand operand will be converted to the same "*base*" as the
left-hand operator (e.g, if you add `asap::seconds` to `asap::year`, the year will be converted to seconds and then
added). For this reason is not advisable to add periods with large different convertion factors between the left and the
right operands. It is ok to add a year to a second, but seconds added to a year can have rounding issues as it
will be converted to a fraction of a year.

```
std::cout << asap::day(1) + asap::month(1) << std::endl
// "1 month, 1 day"

std::cout << asap::year(1) + asap::second(1) << std::endl
// "1 year", second is lost due to rounding
```

Subtracting an `asap::datetime` from another will give you an `asap::duration`:
```
std::cout << asap::tomorrow() - asap::now() << std::endl;
// 9 hours, 27 minutes, 11 seconds
```

You can also add or subtract durations from `asap::datetime` objects:

```
std::cout << asap::now() << std::endl;                 // -> 06-01-2018 14:35:39
std::cout << asap::now() + asap::days(1) << std::endl; // -> 07-01-2018 14:35:39
```

# Literals

The file literals.h has many user-defined literals to provide eye-candy to your code when construction durations:

- `_seconds` is equivalent to `asap::seconds`
- `_minutes` is equivalent to `asap::minutes`
- `_hours` is equivalent to `asap::hours`
- `_days` is equivalent to `asap::days`
- `_weeks` is equivalent to `asap::weeks`
- `_months` is equivalent to `asap::months`
- `_years` is equivalent to `asap::years`

You have to explicitly include these literals by adding the following in your code that is using ASAP:

```
using namespace asap::literals
```

These literals can be used as a shorthand for their class counterpart:

```
// instead of
std::cout << asap::now() + asap::days(2) - asap::hours(1) << std::endl;

// you can write
std::cout << asap::now() + 2_days - 1_hour << std::endl;
```

@typedef asap::seconds
@brief A duration specified in seconds

@typedef asap::second
@brief A duration specified in seconds

@typedef asap::minutes
@brief A duration specified in minutes

@typedef asap::minute
@brief A duration specified in minutes


@typedef asap::hours
@brief A duration specified in hours

@typedef asap::hour
@brief A duration specified in hours


@typedef asap::days
@brief A duration specified in days

@typedef asap::day
@brief A duration specified in days

@typedef asap::weeks (7 days)
@brief A duration specified in weeks (7 days)

@typedef asap::week (7 days)
@brief A duration specified in weeks (7 days)

@typedef asap::months (30 days)
@brief A duration specified in months (30 days)

@typedef asap::month (30 days)
@brief A duration specified in months (30 days)

@typedef asap::years
@brief A duration specified in years

@typedef asap::year
@brief A duration specified in years

@fn asap::duration::duration(double v=0)
@brief Constructs a duration with the value set to @p v
@param v Initial value

@fn asap::duration::duration(const asap::duration< convertfrom > &other)
@tparam convertfrom The other convertion factor
@param other the other duration to read from
3@brief Converts the value of @p `other` to construct an `asap::duration`

@fn asap::duration::operator double() const
@brief Converts an `asap::duration` to `double` in the same 2456convertion factor specified (e.g, `0.5` days, if using asap::days)

@fn asap::duration::operator=(double v)
@brief Sets the internal value to @p v
@return `*this`
@param v The value to set

@fn asap::duration::operator*() const
@brief the same as @ref asap::duration::operator double()
@return the same as @ref asap::duration::operator double() would return

@fn asap::duration::operator-()
@brief Changes the sign of a duration
@return Another duration with the sign inverted

@fn asap::duration::operator duration< other >() const
@tparam other The other convertion factor
@brief Converts an duration to another duration factor (e.g, convert an `asap::day` to an `asap::year`)
@return Another duration with the same factor as `other`

@fn asap::duration::operator+=(const duration< convert2 > &other)
@brief Adds another duration to this duration, converting to this convertion factor (e.g, `1_day + 1_week == 1_day + 7_days`)
@tparam convert2 The convertion factor of @p `other`
@param other The other duration to add
@returns `*this`

@fn asap::duration::operator+=(const duration< convert > &other)
@brief Adds another duration to this duration with the same convertion factor
@param other The other duration to add
@returns `*this`

@fn asap::duration::operator-=(const duration< convert2 > &other)
@brief Subtracts another duration from this duration, converting to this convertion factor (e.g, `1_day -= 1_week == 1_day -= 7_days`)
@tparam convert2 The convertion factor of @p `other`
@param other The other duration to subtract
@returns `*this`

@fn asap::duration::operator=(const duration< convert2 > &other)
@brief Sets this duration as equals to another duration, converting to this convertion factor (e.g, `asap::days d = 1_week == asap::days d = 7_days`)
@tparam convert2 The convertion factor of @p `other`
@param other The other duration to copy
@returns `*this`

@fn asap::duration::str() const
@brief Pretty print this duration, breaking down all the units (e.g: `std::cout << 10_days` would print `1 week, 3 days`)
@returns an instance of `std::string` with an asap::duration prettified in it.
*/
